/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IEnderBase {
  export type EndRequestStruct = {
    account: AddressLike;
    stakingToken: AddressLike;
    tokenAmt: BigNumberish;
  };

  export type EndRequestStructOutput = [
    account: string,
    stakingToken: string,
    tokenAmt: bigint
  ] & { account: string; stakingToken: string; tokenAmt: bigint };
}

export interface EnderELStrategyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkDeposit"
      | "deposit"
      | "getQueueBlock"
      | "hasRequest"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setAddressBase"
      | "setTokenStrategy"
      | "strategy"
      | "tokenStrategy"
      | "transferOwnership"
      | "treasury"
      | "withdrawRequest"
      | "withdrawStEth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressUpdated"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkDeposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [IEnderBase.EndRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getQueueBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRequest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressBase",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenStrategy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "strategy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawRequest",
    values: [IEnderBase.EndRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStEth",
    values: [IEnderBase.EndRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQueueBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddressBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStEth",
    data: BytesLike
  ): Result;
}

export namespace AddressUpdatedEvent {
  export type InputTuple = [newAddr: AddressLike, addrType: BigNumberish];
  export type OutputTuple = [newAddr: string, addrType: bigint];
  export interface OutputObject {
    newAddr: string;
    addrType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnderELStrategy extends BaseContract {
  connect(runner?: ContractRunner | null): EnderELStrategy;
  waitForDeployment(): Promise<this>;

  interface: EnderELStrategyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkDeposit: TypedContractMethod<
    [depositToken: AddressLike, depositAmt: BigNumberish],
    [boolean],
    "view"
  >;

  deposit: TypedContractMethod<
    [param: IEnderBase.EndRequestStruct],
    [bigint],
    "nonpayable"
  >;

  getQueueBlock: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  hasRequest: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<
    [_treasury: AddressLike, _strategy: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAddressBase: TypedContractMethod<
    [_addr: AddressLike, _type: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenStrategy: TypedContractMethod<
    [_str: AddressLike],
    [void],
    "nonpayable"
  >;

  strategy: TypedContractMethod<[], [string], "view">;

  tokenStrategy: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  withdrawRequest: TypedContractMethod<
    [param: IEnderBase.EndRequestStruct],
    [void],
    "nonpayable"
  >;

  withdrawStEth: TypedContractMethod<
    [param: IEnderBase.EndRequestStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkDeposit"
  ): TypedContractMethod<
    [depositToken: AddressLike, depositAmt: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [param: IEnderBase.EndRequestStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getQueueBlock"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasRequest"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_treasury: AddressLike, _strategy: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddressBase"
  ): TypedContractMethod<
    [_addr: AddressLike, _type: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenStrategy"
  ): TypedContractMethod<[_str: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenStrategy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawRequest"
  ): TypedContractMethod<
    [param: IEnderBase.EndRequestStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawStEth"
  ): TypedContractMethod<
    [param: IEnderBase.EndRequestStruct],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "AddressUpdated"
  ): TypedContractEvent<
    AddressUpdatedEvent.InputTuple,
    AddressUpdatedEvent.OutputTuple,
    AddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AddressUpdated(address,uint8)": TypedContractEvent<
      AddressUpdatedEvent.InputTuple,
      AddressUpdatedEvent.OutputTuple,
      AddressUpdatedEvent.OutputObject
    >;
    AddressUpdated: TypedContractEvent<
      AddressUpdatedEvent.InputTuple,
      AddressUpdatedEvent.OutputTuple,
      AddressUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
