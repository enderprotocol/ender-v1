/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IStrategyManager {
  export type WithdrawerAndNonceStruct = {
    withdrawer: AddressLike;
    nonce: BigNumberish;
  };

  export type WithdrawerAndNonceStructOutput = [
    withdrawer: string,
    nonce: bigint
  ] & { withdrawer: string; nonce: bigint };

  export type QueuedWithdrawalStruct = {
    strategies: AddressLike[];
    shares: BigNumberish[];
    depositor: AddressLike;
    withdrawerAndNonce: IStrategyManager.WithdrawerAndNonceStruct;
    withdrawalStartBlock: BigNumberish;
    delegatedAddress: AddressLike;
  };

  export type QueuedWithdrawalStructOutput = [
    strategies: string[],
    shares: bigint[],
    depositor: string,
    withdrawerAndNonce: IStrategyManager.WithdrawerAndNonceStructOutput,
    withdrawalStartBlock: bigint,
    delegatedAddress: string
  ] & {
    strategies: string[];
    shares: bigint[];
    depositor: string;
    withdrawerAndNonce: IStrategyManager.WithdrawerAndNonceStructOutput;
    withdrawalStartBlock: bigint;
    delegatedAddress: string;
  };
}

export interface IStrategyManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completeQueuedWithdrawal"
      | "depositIntoStrategy"
      | "queueWithdrawal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "completeQueuedWithdrawal",
    values: [
      IStrategyManager.QueuedWithdrawalStruct,
      AddressLike[],
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositIntoStrategy",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queueWithdrawal",
    values: [
      BigNumberish[],
      AddressLike[],
      BigNumberish[],
      AddressLike,
      boolean
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "completeQueuedWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositIntoStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueWithdrawal",
    data: BytesLike
  ): Result;
}

export interface IStrategyManager extends BaseContract {
  connect(runner?: ContractRunner | null): IStrategyManager;
  waitForDeployment(): Promise<this>;

  interface: IStrategyManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completeQueuedWithdrawal: TypedContractMethod<
    [
      queuedWithdrawal: IStrategyManager.QueuedWithdrawalStruct,
      tokens: AddressLike[],
      middlewareTimesIndex: BigNumberish,
      receiveAsTokens: boolean
    ],
    [void],
    "nonpayable"
  >;

  depositIntoStrategy: TypedContractMethod<
    [strategy: AddressLike, token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  queueWithdrawal: TypedContractMethod<
    [
      strategyIndexes: BigNumberish[],
      strategies: AddressLike[],
      shares: BigNumberish[],
      withdrawer: AddressLike,
      undelegateIfPossible: boolean
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completeQueuedWithdrawal"
  ): TypedContractMethod<
    [
      queuedWithdrawal: IStrategyManager.QueuedWithdrawalStruct,
      tokens: AddressLike[],
      middlewareTimesIndex: BigNumberish,
      receiveAsTokens: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositIntoStrategy"
  ): TypedContractMethod<
    [strategy: AddressLike, token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "queueWithdrawal"
  ): TypedContractMethod<
    [
      strategyIndexes: BigNumberish[],
      strategies: AddressLike[],
      shares: BigNumberish[],
      withdrawer: AddressLike,
      undelegateIfPossible: boolean
    ],
    [string],
    "nonpayable"
  >;

  filters: {};
}
