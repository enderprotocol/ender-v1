/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEnderBase {
  export type EndRequestStruct = {
    account: AddressLike;
    stakingToken: AddressLike;
    tokenAmt: BigNumberish;
  };

  export type EndRequestStructOutput = [
    account: string,
    stakingToken: string,
    tokenAmt: bigint
  ] & { account: string; stakingToken: string; tokenAmt: bigint };
}

export interface IEnderTreasuryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "collect"
      | "depositTreasury"
      | "mintEndToUser"
      | "stakeRebasingReward"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "collect",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTreasury",
    values: [IEnderBase.EndRequestStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintEndToUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRebasingReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [IEnderBase.EndRequestStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintEndToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRebasingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IEnderTreasury extends BaseContract {
  connect(runner?: ContractRunner | null): IEnderTreasury;
  waitForDeployment(): Promise<this>;

  interface: IEnderTreasuryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  collect: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositTreasury: TypedContractMethod<
    [arg0: IEnderBase.EndRequestStruct, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintEndToUser: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeRebasingReward: TypedContractMethod<
    [_asset: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [arg0: IEnderBase.EndRequestStruct, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "collect"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositTreasury"
  ): TypedContractMethod<
    [arg0: IEnderBase.EndRequestStruct, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintEndToUser"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeRebasingReward"
  ): TypedContractMethod<[_asset: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [arg0: IEnderBase.EndRequestStruct, arg1: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
