/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EnderStaking {
  export type SignDataStruct = {
    user: AddressLike;
    key: string;
    signature: BytesLike;
  };

  export type SignDataStructOutput = [
    user: string,
    key: string,
    signature: string
  ] & { user: string; key: string; signature: string };
}

export interface EnderStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bondRewardPercentage"
      | "calculateSEndTokens"
      | "eip712Domain"
      | "endToken"
      | "enderBond"
      | "enderTreasury"
      | "epochStakingReward"
      | "initialize"
      | "isWhitelisted"
      | "owner"
      | "rebasingIndex"
      | "renounceOwnership"
      | "sEndToken"
      | "setAddress"
      | "setBondRewardPercentage"
      | "setStakingEnable"
      | "setStakingPause"
      | "setUnstakeEnable"
      | "setsigner"
      | "signer"
      | "stEth"
      | "stake"
      | "stakingContractPause"
      | "stakingEnable"
      | "transferOwnership"
      | "unstake"
      | "unstakeEnable"
      | "whitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressUpdated"
      | "EIP712DomainChanged"
      | "EpochStakingReward"
      | "Initialized"
      | "OwnershipTransferred"
      | "PercentUpdated"
      | "Stake"
      | "WhitelistChanged"
      | "newSigner"
      | "stakingContractPauseSet"
      | "stakingEnableSet"
      | "unStake"
      | "unstakeEnableSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bondRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSEndTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "enderBond", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enderTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochStakingReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebasingIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sEndToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondRewardPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingEnable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakeEnable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setsigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "stEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, EnderStaking.SignDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContractPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeEnable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [boolean]): string;

  decodeFunctionResult(
    functionFragment: "bondRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSEndTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enderBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enderTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochStakingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebasingIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sEndToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBondRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakeEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setsigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingContractPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unstakeEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
}

export namespace AddressUpdatedEvent {
  export type InputTuple = [addr: AddressLike, addrType: BigNumberish];
  export type OutputTuple = [addr: string, addrType: bigint];
  export interface OutputObject {
    addr: string;
    addrType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochStakingRewardEvent {
  export type InputTuple = [
    asset: AddressLike,
    totalReward: BigNumberish,
    rw2: BigNumberish,
    sendTokens: BigNumberish
  ];
  export type OutputTuple = [
    asset: string,
    totalReward: bigint,
    rw2: bigint,
    sendTokens: bigint
  ];
  export interface OutputObject {
    asset: string;
    totalReward: bigint;
    rw2: bigint;
    sendTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PercentUpdatedEvent {
  export type InputTuple = [percent: BigNumberish];
  export type OutputTuple = [percent: bigint];
  export interface OutputObject {
    percent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [staker: AddressLike, amount: BigNumberish];
  export type OutputTuple = [staker: string, amount: bigint];
  export interface OutputObject {
    staker: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistChangedEvent {
  export type InputTuple = [action: boolean];
  export type OutputTuple = [action: boolean];
  export interface OutputObject {
    action: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace newSignerEvent {
  export type InputTuple = [_signer: AddressLike];
  export type OutputTuple = [_signer: string];
  export interface OutputObject {
    _signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace stakingContractPauseSetEvent {
  export type InputTuple = [isEnable: boolean];
  export type OutputTuple = [isEnable: boolean];
  export interface OutputObject {
    isEnable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace stakingEnableSetEvent {
  export type InputTuple = [isEnable: boolean];
  export type OutputTuple = [isEnable: boolean];
  export interface OutputObject {
    isEnable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace unStakeEvent {
  export type InputTuple = [withdrawer: AddressLike, amount: BigNumberish];
  export type OutputTuple = [withdrawer: string, amount: bigint];
  export interface OutputObject {
    withdrawer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace unstakeEnableSetEvent {
  export type InputTuple = [isEnable: boolean];
  export type OutputTuple = [isEnable: boolean];
  export interface OutputObject {
    isEnable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnderStaking extends BaseContract {
  connect(runner?: ContractRunner | null): EnderStaking;
  waitForDeployment(): Promise<this>;

  interface: EnderStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bondRewardPercentage: TypedContractMethod<[], [bigint], "view">;

  calculateSEndTokens: TypedContractMethod<
    [_endAmount: BigNumberish],
    [bigint],
    "view"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  endToken: TypedContractMethod<[], [string], "view">;

  enderBond: TypedContractMethod<[], [string], "view">;

  enderTreasury: TypedContractMethod<[], [string], "view">;

  epochStakingReward: TypedContractMethod<
    [_asset: AddressLike],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _end: AddressLike,
      _sEnd: AddressLike,
      _stEth: AddressLike,
      _signer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isWhitelisted: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rebasingIndex: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sEndToken: TypedContractMethod<[], [string], "view">;

  setAddress: TypedContractMethod<
    [_addr: AddressLike, _type: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBondRewardPercentage: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakingEnable: TypedContractMethod<
    [_enable: boolean],
    [void],
    "nonpayable"
  >;

  setStakingPause: TypedContractMethod<
    [_enable: boolean],
    [void],
    "nonpayable"
  >;

  setUnstakeEnable: TypedContractMethod<
    [_enable: boolean],
    [void],
    "nonpayable"
  >;

  setsigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  stEth: TypedContractMethod<[], [string], "view">;

  stake: TypedContractMethod<
    [amount: BigNumberish, userSign: EnderStaking.SignDataStruct],
    [void],
    "nonpayable"
  >;

  stakingContractPause: TypedContractMethod<[], [boolean], "view">;

  stakingEnable: TypedContractMethod<[], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  unstakeEnable: TypedContractMethod<[], [boolean], "view">;

  whitelist: TypedContractMethod<[_action: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bondRewardPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateSEndTokens"
  ): TypedContractMethod<[_endAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enderBond"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enderTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "epochStakingReward"
  ): TypedContractMethod<[_asset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _end: AddressLike,
      _sEnd: AddressLike,
      _stEth: AddressLike,
      _signer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebasingIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sEndToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [_addr: AddressLike, _type: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBondRewardPercentage"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingEnable"
  ): TypedContractMethod<[_enable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStakingPause"
  ): TypedContractMethod<[_enable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUnstakeEnable"
  ): TypedContractMethod<[_enable: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setsigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stEth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [amount: BigNumberish, userSign: EnderStaking.SignDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakingContractPause"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "stakingEnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeEnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[_action: boolean], [void], "nonpayable">;

  getEvent(
    key: "AddressUpdated"
  ): TypedContractEvent<
    AddressUpdatedEvent.InputTuple,
    AddressUpdatedEvent.OutputTuple,
    AddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EpochStakingReward"
  ): TypedContractEvent<
    EpochStakingRewardEvent.InputTuple,
    EpochStakingRewardEvent.OutputTuple,
    EpochStakingRewardEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PercentUpdated"
  ): TypedContractEvent<
    PercentUpdatedEvent.InputTuple,
    PercentUpdatedEvent.OutputTuple,
    PercentUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistChanged"
  ): TypedContractEvent<
    WhitelistChangedEvent.InputTuple,
    WhitelistChangedEvent.OutputTuple,
    WhitelistChangedEvent.OutputObject
  >;
  getEvent(
    key: "newSigner"
  ): TypedContractEvent<
    newSignerEvent.InputTuple,
    newSignerEvent.OutputTuple,
    newSignerEvent.OutputObject
  >;
  getEvent(
    key: "stakingContractPauseSet"
  ): TypedContractEvent<
    stakingContractPauseSetEvent.InputTuple,
    stakingContractPauseSetEvent.OutputTuple,
    stakingContractPauseSetEvent.OutputObject
  >;
  getEvent(
    key: "stakingEnableSet"
  ): TypedContractEvent<
    stakingEnableSetEvent.InputTuple,
    stakingEnableSetEvent.OutputTuple,
    stakingEnableSetEvent.OutputObject
  >;
  getEvent(
    key: "unStake"
  ): TypedContractEvent<
    unStakeEvent.InputTuple,
    unStakeEvent.OutputTuple,
    unStakeEvent.OutputObject
  >;
  getEvent(
    key: "unstakeEnableSet"
  ): TypedContractEvent<
    unstakeEnableSetEvent.InputTuple,
    unstakeEnableSetEvent.OutputTuple,
    unstakeEnableSetEvent.OutputObject
  >;

  filters: {
    "AddressUpdated(address,uint256)": TypedContractEvent<
      AddressUpdatedEvent.InputTuple,
      AddressUpdatedEvent.OutputTuple,
      AddressUpdatedEvent.OutputObject
    >;
    AddressUpdated: TypedContractEvent<
      AddressUpdatedEvent.InputTuple,
      AddressUpdatedEvent.OutputTuple,
      AddressUpdatedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EpochStakingReward(address,uint256,uint256,uint256)": TypedContractEvent<
      EpochStakingRewardEvent.InputTuple,
      EpochStakingRewardEvent.OutputTuple,
      EpochStakingRewardEvent.OutputObject
    >;
    EpochStakingReward: TypedContractEvent<
      EpochStakingRewardEvent.InputTuple,
      EpochStakingRewardEvent.OutputTuple,
      EpochStakingRewardEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PercentUpdated(uint256)": TypedContractEvent<
      PercentUpdatedEvent.InputTuple,
      PercentUpdatedEvent.OutputTuple,
      PercentUpdatedEvent.OutputObject
    >;
    PercentUpdated: TypedContractEvent<
      PercentUpdatedEvent.InputTuple,
      PercentUpdatedEvent.OutputTuple,
      PercentUpdatedEvent.OutputObject
    >;

    "Stake(address,uint256)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "WhitelistChanged(bool)": TypedContractEvent<
      WhitelistChangedEvent.InputTuple,
      WhitelistChangedEvent.OutputTuple,
      WhitelistChangedEvent.OutputObject
    >;
    WhitelistChanged: TypedContractEvent<
      WhitelistChangedEvent.InputTuple,
      WhitelistChangedEvent.OutputTuple,
      WhitelistChangedEvent.OutputObject
    >;

    "newSigner(address)": TypedContractEvent<
      newSignerEvent.InputTuple,
      newSignerEvent.OutputTuple,
      newSignerEvent.OutputObject
    >;
    newSigner: TypedContractEvent<
      newSignerEvent.InputTuple,
      newSignerEvent.OutputTuple,
      newSignerEvent.OutputObject
    >;

    "stakingContractPauseSet(bool)": TypedContractEvent<
      stakingContractPauseSetEvent.InputTuple,
      stakingContractPauseSetEvent.OutputTuple,
      stakingContractPauseSetEvent.OutputObject
    >;
    stakingContractPauseSet: TypedContractEvent<
      stakingContractPauseSetEvent.InputTuple,
      stakingContractPauseSetEvent.OutputTuple,
      stakingContractPauseSetEvent.OutputObject
    >;

    "stakingEnableSet(bool)": TypedContractEvent<
      stakingEnableSetEvent.InputTuple,
      stakingEnableSetEvent.OutputTuple,
      stakingEnableSetEvent.OutputObject
    >;
    stakingEnableSet: TypedContractEvent<
      stakingEnableSetEvent.InputTuple,
      stakingEnableSetEvent.OutputTuple,
      stakingEnableSetEvent.OutputObject
    >;

    "unStake(address,uint256)": TypedContractEvent<
      unStakeEvent.InputTuple,
      unStakeEvent.OutputTuple,
      unStakeEvent.OutputObject
    >;
    unStake: TypedContractEvent<
      unStakeEvent.InputTuple,
      unStakeEvent.OutputTuple,
      unStakeEvent.OutputObject
    >;

    "unstakeEnableSet(bool)": TypedContractEvent<
      unstakeEnableSetEvent.InputTuple,
      unstakeEnableSetEvent.OutputTuple,
      unstakeEnableSetEvent.OutputObject
    >;
    unstakeEnableSet: TypedContractEvent<
      unstakeEnableSetEvent.InputTuple,
      unstakeEnableSetEvent.OutputTuple,
      unstakeEnableSetEvent.OutputObject
    >;
  };
}
