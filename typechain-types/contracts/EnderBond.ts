/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace EnderBond {
  export type SignDataStruct = {
    user: AddressLike;
    key: string;
    signature: BytesLike;
  };

  export type SignDataStructOutput = [
    user: string,
    key: string,
    signature: string
  ] & { user: string; key: string; signature: string };
}

export interface EnderBondInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SECONDS_IN_DAY"
      | "bondFeeEnabled"
      | "bondIdAtMaturity"
      | "bondPause"
      | "bondYieldBaseRate"
      | "bondYieldShareIndex"
      | "bondableTokens"
      | "bonds"
      | "calculateBondRewardAmount"
      | "calculateRefractionRewards"
      | "calculateStakingReward"
      | "checkUpkeep"
      | "claimRewards"
      | "dayBondYieldShareIndex"
      | "dayRewardShareIndexForSend"
      | "dayToRefractionShareUpdation"
      | "dayToRefractionShareUpdationSend"
      | "dayToRewardShareIndex"
      | "dayToYeildShareUpdation"
      | "deductFeesFromTransfer"
      | "deposit"
      | "depositEnable"
      | "eip712Domain"
      | "endMint"
      | "epochBondYieldShareIndex"
      | "epochRewardShareIndex"
      | "epochRewardShareIndexByPass"
      | "epochRewardShareIndexForSend"
      | "epochRewardShareIndexSendByPass"
      | "getAddress"
      | "getInterest"
      | "getLoopCount"
      | "initialize"
      | "interval"
      | "isSet"
      | "isWhitelisted"
      | "isWithdrawPause"
      | "keeper"
      | "lastDay"
      | "lastSecOfRefraction"
      | "lastSecOfSendReward"
      | "lastSecOfYeildUpdation"
      | "lastTimeStamp"
      | "lido"
      | "maturities"
      | "minDepositAmount"
      | "owner"
      | "performUpkeep"
      | "rateOfChange"
      | "renounceOwnership"
      | "resetEndMint"
      | "rewardShareIndex"
      | "rewardShareIndexSend"
      | "rewardSharePerUserIndex"
      | "rewardSharePerUserIndexSend"
      | "secondsBondYieldShareIndex"
      | "secondsRefractionShareIndex"
      | "secondsRefractionShareIndexSend"
      | "setAddress"
      | "setAvailableBondFee"
      | "setBondFeeEnabled"
      | "setBondPause"
      | "setBondYieldBaseRate"
      | "setBondableTokens"
      | "setBool"
      | "setDepositEnable"
      | "setIndexesOfUser"
      | "setInterval"
      | "setMinDepAmount"
      | "setTxFees"
      | "setWithdrawPause"
      | "setsigner"
      | "signer"
      | "stEth"
      | "totalBondPrincipalAmount"
      | "totalDeposit"
      | "totalRefractionPrincipal"
      | "totalRewardPrincipal"
      | "transferOwnership"
      | "txFees"
      | "userBondYieldShareIndex"
      | "userInfoDepositContract"
      | "whitelist"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressSet"
      | "BondFeeEnabledSet"
      | "BondPauseSet"
      | "BondYieldBaseRateSet"
      | "BondYieldShareIndexUpdated"
      | "BondableTokensSet"
      | "BoolSet"
      | "ClaimRewards"
      | "Deposit"
      | "DepositEnableSet"
      | "EIP712DomainChanged"
      | "EndMintReset"
      | "Initialized"
      | "IntervalSet"
      | "MinDepAmountSet"
      | "NewSigner"
      | "OwnershipTransferred"
      | "RefractionRewardsClaimed"
      | "RewardShareIndexUpdated"
      | "RewardSharePerUserIndexSet"
      | "StakingRewardsClaimed"
      | "TxFeesSet"
      | "WhitelistChanged"
      | "WithdrawPauseSet"
      | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SECONDS_IN_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondIdAtMaturity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bondPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bondYieldBaseRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondYieldShareIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondableTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "bonds", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "calculateBondRewardAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRefractionRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakingReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayBondYieldShareIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayRewardShareIndexForSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayToRefractionShareUpdation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayToRefractionShareUpdationSend",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayToRewardShareIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dayToYeildShareUpdation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deductFeesFromTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      EnderBond.SignDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochBondYieldShareIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewardShareIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewardShareIndexByPass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewardShareIndexForSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "epochRewardShareIndexSendByPass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoopCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "interval", values?: undefined): string;
  encodeFunctionData(functionFragment: "isSet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawPause",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "lastDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastSecOfRefraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastSecOfSendReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastSecOfYeildUpdation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lido", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maturities",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateOfChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetEndMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardShareIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardShareIndexSend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSharePerUserIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSharePerUserIndexSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "secondsBondYieldShareIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "secondsRefractionShareIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "secondsRefractionShareIndexSend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvailableBondFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondFeeEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondYieldBaseRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondableTokens",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "setBool", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setDepositEnable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIndexesOfUser",
    values: [BigNumberish[], BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDepAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTxFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setsigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(functionFragment: "stEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBondPrincipalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRefractionPrincipal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardPrincipal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "txFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userBondYieldShareIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfoDepositContract",
    values: [BigNumberish[], EnderBond.SignDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SECONDS_IN_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondIdAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bondYieldBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondYieldShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBondRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRefractionRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayBondYieldShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayRewardShareIndexForSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayToRefractionShareUpdation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayToRefractionShareUpdationSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayToRewardShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dayToYeildShareUpdation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deductFeesFromTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochBondYieldShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardShareIndexByPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardShareIndexForSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochRewardShareIndexSendByPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoopCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "interval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastDay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSecOfRefraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSecOfSendReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSecOfYeildUpdation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lido", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maturities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateOfChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetEndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardShareIndexSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSharePerUserIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSharePerUserIndexSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsBondYieldShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsRefractionShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsRefractionShareIndexSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAvailableBondFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondYieldBaseRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDepositEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIndexesOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDepAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTxFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setsigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBondPrincipalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRefractionPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardPrincipal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userBondYieldShareIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInfoDepositContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AddressSetEvent {
  export type InputTuple = [addrType: BigNumberish, newAddress: AddressLike];
  export type OutputTuple = [addrType: bigint, newAddress: string];
  export interface OutputObject {
    addrType: bigint;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondFeeEnabledSetEvent {
  export type InputTuple = [isEnabled: boolean];
  export type OutputTuple = [isEnabled: boolean];
  export interface OutputObject {
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondPauseSetEvent {
  export type InputTuple = [isEnabled: boolean];
  export type OutputTuple = [isEnabled: boolean];
  export interface OutputObject {
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondYieldBaseRateSetEvent {
  export type InputTuple = [newBondYieldBaseRate: BigNumberish];
  export type OutputTuple = [newBondYieldBaseRate: bigint];
  export interface OutputObject {
    newBondYieldBaseRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondYieldShareIndexUpdatedEvent {
  export type InputTuple = [newBondYieldShareIndex: BigNumberish];
  export type OutputTuple = [newBondYieldShareIndex: bigint];
  export interface OutputObject {
    newBondYieldShareIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BondableTokensSetEvent {
  export type InputTuple = [token: AddressLike, isEnabled: boolean];
  export type OutputTuple = [token: string, isEnabled: boolean];
  export interface OutputObject {
    token: string;
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BoolSetEvent {
  export type InputTuple = [newValue: boolean];
  export type OutputTuple = [newValue: boolean];
  export interface OutputObject {
    newValue: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRewardsEvent {
  export type InputTuple = [
    account: AddressLike,
    reward: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [account: string, reward: bigint, tokenId: bigint];
  export interface OutputObject {
    account: string;
    reward: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    principal: BigNumberish,
    maturity: BigNumberish,
    token: AddressLike,
    bondFee: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenId: bigint,
    principal: bigint,
    maturity: bigint,
    token: string,
    bondFee: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    principal: bigint;
    maturity: bigint;
    token: string;
    bondFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEnableSetEvent {
  export type InputTuple = [isEnabled: boolean];
  export type OutputTuple = [isEnabled: boolean];
  export interface OutputObject {
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndMintResetEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IntervalSetEvent {
  export type InputTuple = [newInterval: BigNumberish];
  export type OutputTuple = [newInterval: bigint];
  export interface OutputObject {
    newInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinDepAmountSetEvent {
  export type InputTuple = [newAmount: BigNumberish];
  export type OutputTuple = [newAmount: bigint];
  export interface OutputObject {
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSignerEvent {
  export type InputTuple = [_signer: AddressLike];
  export type OutputTuple = [_signer: string];
  export interface OutputObject {
    _signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefractionRewardsClaimedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenId: bigint,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardShareIndexUpdatedEvent {
  export type InputTuple = [newRewardShareIndex: BigNumberish];
  export type OutputTuple = [newRewardShareIndex: bigint];
  export interface OutputObject {
    newRewardShareIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardSharePerUserIndexSetEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    newRewardSharePerUserIndex: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    newRewardSharePerUserIndex: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    newRewardSharePerUserIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingRewardsClaimedEvent {
  export type InputTuple = [
    sender: AddressLike,
    tokenId: BigNumberish,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    tokenId: bigint,
    rewardAmount: bigint
  ];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TxFeesSetEvent {
  export type InputTuple = [newTxFees: BigNumberish];
  export type OutputTuple = [newTxFees: bigint];
  export interface OutputObject {
    newTxFees: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistChangedEvent {
  export type InputTuple = [action: boolean];
  export type OutputTuple = [action: boolean];
  export interface OutputObject {
    action: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawPauseSetEvent {
  export type InputTuple = [isEnabled: boolean];
  export type OutputTuple = [isEnabled: boolean];
  export interface OutputObject {
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [sender: AddressLike, tokenId: BigNumberish];
  export type OutputTuple = [sender: string, tokenId: bigint];
  export interface OutputObject {
    sender: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EnderBond extends BaseContract {
  connect(runner?: ContractRunner | null): EnderBond;
  waitForDeployment(): Promise<this>;

  interface: EnderBondInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SECONDS_IN_DAY: TypedContractMethod<[], [bigint], "view">;

  bondFeeEnabled: TypedContractMethod<[], [boolean], "view">;

  bondIdAtMaturity: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  bondPause: TypedContractMethod<[], [boolean], "view">;

  bondYieldBaseRate: TypedContractMethod<[], [bigint], "view">;

  bondYieldShareIndex: TypedContractMethod<[], [bigint], "view">;

  bondableTokens: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  bonds: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        withdrawn: boolean;
        principal: bigint;
        startTime: bigint;
        maturity: bigint;
        token: string;
        bondFee: bigint;
        depositPrincipal: bigint;
        refractionPrincipal: bigint;
        refractionSIndex: bigint;
        stakingSendIndex: bigint;
        YieldIndex: bigint;
      }
    ],
    "view"
  >;

  calculateBondRewardAmount: TypedContractMethod<
    [_tokenId: BigNumberish, precalUsers: BigNumberish],
    [bigint],
    "view"
  >;

  calculateRefractionRewards: TypedContractMethod<
    [_tokenId: BigNumberish, precalUsers: BigNumberish],
    [bigint],
    "view"
  >;

  calculateStakingReward: TypedContractMethod<
    [_tokenId: BigNumberish, precalUsers: BigNumberish],
    [bigint],
    "view"
  >;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  dayBondYieldShareIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  dayRewardShareIndexForSend: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  dayToRefractionShareUpdation: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  dayToRefractionShareUpdationSend: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  dayToRewardShareIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  dayToYeildShareUpdation: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  deductFeesFromTransfer: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      user: AddressLike,
      principal: BigNumberish,
      maturity: BigNumberish,
      bondFee: BigNumberish,
      token: AddressLike,
      userSign: EnderBond.SignDataStruct
    ],
    [bigint],
    "payable"
  >;

  depositEnable: TypedContractMethod<[], [boolean], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  endMint: TypedContractMethod<[], [bigint], "view">;

  epochBondYieldShareIndex: TypedContractMethod<[], [void], "nonpayable">;

  epochRewardShareIndex: TypedContractMethod<
    [_reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  epochRewardShareIndexByPass: TypedContractMethod<[], [void], "nonpayable">;

  epochRewardShareIndexForSend: TypedContractMethod<
    [_reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  epochRewardShareIndexSendByPass: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  getAddress: TypedContractMethod<[_type: BigNumberish], [string], "view">;

  getInterest: TypedContractMethod<[maturity: BigNumberish], [bigint], "view">;

  getLoopCount: TypedContractMethod<[], [bigint], "nonpayable">;

  initialize: TypedContractMethod<
    [endToken_: AddressLike, _lido: AddressLike, _signer: AddressLike],
    [void],
    "nonpayable"
  >;

  interval: TypedContractMethod<[], [bigint], "view">;

  isSet: TypedContractMethod<[], [boolean], "view">;

  isWhitelisted: TypedContractMethod<[], [boolean], "view">;

  isWithdrawPause: TypedContractMethod<[], [boolean], "view">;

  keeper: TypedContractMethod<[], [string], "view">;

  lastDay: TypedContractMethod<[], [bigint], "view">;

  lastSecOfRefraction: TypedContractMethod<[], [bigint], "view">;

  lastSecOfSendReward: TypedContractMethod<[], [bigint], "view">;

  lastSecOfYeildUpdation: TypedContractMethod<[], [bigint], "view">;

  lastTimeStamp: TypedContractMethod<[], [bigint], "view">;

  lido: TypedContractMethod<[], [string], "view">;

  maturities: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  minDepositAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  rateOfChange: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resetEndMint: TypedContractMethod<[], [void], "nonpayable">;

  rewardShareIndex: TypedContractMethod<[], [bigint], "view">;

  rewardShareIndexSend: TypedContractMethod<[], [bigint], "view">;

  rewardSharePerUserIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  rewardSharePerUserIndexSend: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  secondsBondYieldShareIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  secondsRefractionShareIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  secondsRefractionShareIndexSend: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  setAddress: TypedContractMethod<
    [_addr: AddressLike, _type: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAvailableBondFee: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBondFeeEnabled: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setBondPause: TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;

  setBondYieldBaseRate: TypedContractMethod<
    [_bondYieldBaseRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBondableTokens: TypedContractMethod<
    [tokens: AddressLike[], enabled: boolean],
    [void],
    "nonpayable"
  >;

  setBool: TypedContractMethod<[_bool: boolean], [void], "nonpayable">;

  setDepositEnable: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setIndexesOfUser: TypedContractMethod<
    [
      tokenId: BigNumberish[],
      refractionSIndex: BigNumberish,
      stakingSendIndex: BigNumberish,
      YieldIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setInterval: TypedContractMethod<
    [_interval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDepAmount: TypedContractMethod<
    [_amt: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTxFees: TypedContractMethod<[_txFees: BigNumberish], [void], "nonpayable">;

  setWithdrawPause: TypedContractMethod<
    [_enabled: boolean],
    [void],
    "nonpayable"
  >;

  setsigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  stEth: TypedContractMethod<[], [string], "view">;

  totalBondPrincipalAmount: TypedContractMethod<[], [bigint], "view">;

  totalDeposit: TypedContractMethod<[], [bigint], "view">;

  totalRefractionPrincipal: TypedContractMethod<[], [bigint], "view">;

  totalRewardPrincipal: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  txFees: TypedContractMethod<[], [bigint], "view">;

  userBondYieldShareIndex: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  userInfoDepositContract: TypedContractMethod<
    [index: BigNumberish[], userSign: EnderBond.SignDataStruct],
    [void],
    "nonpayable"
  >;

  whitelist: TypedContractMethod<[_action: boolean], [void], "nonpayable">;

  withdraw: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SECONDS_IN_DAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondFeeEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "bondIdAtMaturity"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "bondPause"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "bondYieldBaseRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondYieldShareIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bondableTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bonds"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        withdrawn: boolean;
        principal: bigint;
        startTime: bigint;
        maturity: bigint;
        token: string;
        bondFee: bigint;
        depositPrincipal: bigint;
        refractionPrincipal: bigint;
        refractionSIndex: bigint;
        stakingSendIndex: bigint;
        YieldIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateBondRewardAmount"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, precalUsers: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateRefractionRewards"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, precalUsers: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateStakingReward"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, precalUsers: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean; performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dayBondYieldShareIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dayRewardShareIndexForSend"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dayToRefractionShareUpdation"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "dayToRefractionShareUpdationSend"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "dayToRewardShareIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "dayToYeildShareUpdation"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "deductFeesFromTransfer"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      user: AddressLike,
      principal: BigNumberish,
      maturity: BigNumberish,
      bondFee: BigNumberish,
      token: AddressLike,
      userSign: EnderBond.SignDataStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositEnable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endMint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochBondYieldShareIndex"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epochRewardShareIndex"
  ): TypedContractMethod<[_reward: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epochRewardShareIndexByPass"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epochRewardShareIndexForSend"
  ): TypedContractMethod<[_reward: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "epochRewardShareIndexSendByPass"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[_type: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getInterest"
  ): TypedContractMethod<[maturity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLoopCount"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [endToken_: AddressLike, _lido: AddressLike, _signer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isSet"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelisted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWithdrawPause"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "keeper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastSecOfRefraction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastSecOfSendReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastSecOfYeildUpdation"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTimeStamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lido"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maturities"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDepositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rateOfChange"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetEndMint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardShareIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardShareIndexSend"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardSharePerUserIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardSharePerUserIndexSend"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "secondsBondYieldShareIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "secondsRefractionShareIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "secondsRefractionShareIndexSend"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [_addr: AddressLike, _type: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAvailableBondFee"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBondFeeEnabled"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBondPause"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBondYieldBaseRate"
  ): TypedContractMethod<
    [_bondYieldBaseRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBondableTokens"
  ): TypedContractMethod<
    [tokens: AddressLike[], enabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBool"
  ): TypedContractMethod<[_bool: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDepositEnable"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIndexesOfUser"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish[],
      refractionSIndex: BigNumberish,
      stakingSendIndex: BigNumberish,
      YieldIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInterval"
  ): TypedContractMethod<[_interval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinDepAmount"
  ): TypedContractMethod<[_amt: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTxFees"
  ): TypedContractMethod<[_txFees: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawPause"
  ): TypedContractMethod<[_enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setsigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "signer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stEth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalBondPrincipalAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRefractionPrincipal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalRewardPrincipal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "txFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userBondYieldShareIndex"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "userInfoDepositContract"
  ): TypedContractMethod<
    [index: BigNumberish[], userSign: EnderBond.SignDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelist"
  ): TypedContractMethod<[_action: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AddressSet"
  ): TypedContractEvent<
    AddressSetEvent.InputTuple,
    AddressSetEvent.OutputTuple,
    AddressSetEvent.OutputObject
  >;
  getEvent(
    key: "BondFeeEnabledSet"
  ): TypedContractEvent<
    BondFeeEnabledSetEvent.InputTuple,
    BondFeeEnabledSetEvent.OutputTuple,
    BondFeeEnabledSetEvent.OutputObject
  >;
  getEvent(
    key: "BondPauseSet"
  ): TypedContractEvent<
    BondPauseSetEvent.InputTuple,
    BondPauseSetEvent.OutputTuple,
    BondPauseSetEvent.OutputObject
  >;
  getEvent(
    key: "BondYieldBaseRateSet"
  ): TypedContractEvent<
    BondYieldBaseRateSetEvent.InputTuple,
    BondYieldBaseRateSetEvent.OutputTuple,
    BondYieldBaseRateSetEvent.OutputObject
  >;
  getEvent(
    key: "BondYieldShareIndexUpdated"
  ): TypedContractEvent<
    BondYieldShareIndexUpdatedEvent.InputTuple,
    BondYieldShareIndexUpdatedEvent.OutputTuple,
    BondYieldShareIndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BondableTokensSet"
  ): TypedContractEvent<
    BondableTokensSetEvent.InputTuple,
    BondableTokensSetEvent.OutputTuple,
    BondableTokensSetEvent.OutputObject
  >;
  getEvent(
    key: "BoolSet"
  ): TypedContractEvent<
    BoolSetEvent.InputTuple,
    BoolSetEvent.OutputTuple,
    BoolSetEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRewards"
  ): TypedContractEvent<
    ClaimRewardsEvent.InputTuple,
    ClaimRewardsEvent.OutputTuple,
    ClaimRewardsEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "DepositEnableSet"
  ): TypedContractEvent<
    DepositEnableSetEvent.InputTuple,
    DepositEnableSetEvent.OutputTuple,
    DepositEnableSetEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "EndMintReset"
  ): TypedContractEvent<
    EndMintResetEvent.InputTuple,
    EndMintResetEvent.OutputTuple,
    EndMintResetEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "IntervalSet"
  ): TypedContractEvent<
    IntervalSetEvent.InputTuple,
    IntervalSetEvent.OutputTuple,
    IntervalSetEvent.OutputObject
  >;
  getEvent(
    key: "MinDepAmountSet"
  ): TypedContractEvent<
    MinDepAmountSetEvent.InputTuple,
    MinDepAmountSetEvent.OutputTuple,
    MinDepAmountSetEvent.OutputObject
  >;
  getEvent(
    key: "NewSigner"
  ): TypedContractEvent<
    NewSignerEvent.InputTuple,
    NewSignerEvent.OutputTuple,
    NewSignerEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RefractionRewardsClaimed"
  ): TypedContractEvent<
    RefractionRewardsClaimedEvent.InputTuple,
    RefractionRewardsClaimedEvent.OutputTuple,
    RefractionRewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardShareIndexUpdated"
  ): TypedContractEvent<
    RewardShareIndexUpdatedEvent.InputTuple,
    RewardShareIndexUpdatedEvent.OutputTuple,
    RewardShareIndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardSharePerUserIndexSet"
  ): TypedContractEvent<
    RewardSharePerUserIndexSetEvent.InputTuple,
    RewardSharePerUserIndexSetEvent.OutputTuple,
    RewardSharePerUserIndexSetEvent.OutputObject
  >;
  getEvent(
    key: "StakingRewardsClaimed"
  ): TypedContractEvent<
    StakingRewardsClaimedEvent.InputTuple,
    StakingRewardsClaimedEvent.OutputTuple,
    StakingRewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TxFeesSet"
  ): TypedContractEvent<
    TxFeesSetEvent.InputTuple,
    TxFeesSetEvent.OutputTuple,
    TxFeesSetEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistChanged"
  ): TypedContractEvent<
    WhitelistChangedEvent.InputTuple,
    WhitelistChangedEvent.OutputTuple,
    WhitelistChangedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawPauseSet"
  ): TypedContractEvent<
    WithdrawPauseSetEvent.InputTuple,
    WithdrawPauseSetEvent.OutputTuple,
    WithdrawPauseSetEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "AddressSet(uint256,address)": TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;
    AddressSet: TypedContractEvent<
      AddressSetEvent.InputTuple,
      AddressSetEvent.OutputTuple,
      AddressSetEvent.OutputObject
    >;

    "BondFeeEnabledSet(bool)": TypedContractEvent<
      BondFeeEnabledSetEvent.InputTuple,
      BondFeeEnabledSetEvent.OutputTuple,
      BondFeeEnabledSetEvent.OutputObject
    >;
    BondFeeEnabledSet: TypedContractEvent<
      BondFeeEnabledSetEvent.InputTuple,
      BondFeeEnabledSetEvent.OutputTuple,
      BondFeeEnabledSetEvent.OutputObject
    >;

    "BondPauseSet(bool)": TypedContractEvent<
      BondPauseSetEvent.InputTuple,
      BondPauseSetEvent.OutputTuple,
      BondPauseSetEvent.OutputObject
    >;
    BondPauseSet: TypedContractEvent<
      BondPauseSetEvent.InputTuple,
      BondPauseSetEvent.OutputTuple,
      BondPauseSetEvent.OutputObject
    >;

    "BondYieldBaseRateSet(uint256)": TypedContractEvent<
      BondYieldBaseRateSetEvent.InputTuple,
      BondYieldBaseRateSetEvent.OutputTuple,
      BondYieldBaseRateSetEvent.OutputObject
    >;
    BondYieldBaseRateSet: TypedContractEvent<
      BondYieldBaseRateSetEvent.InputTuple,
      BondYieldBaseRateSetEvent.OutputTuple,
      BondYieldBaseRateSetEvent.OutputObject
    >;

    "BondYieldShareIndexUpdated(uint256)": TypedContractEvent<
      BondYieldShareIndexUpdatedEvent.InputTuple,
      BondYieldShareIndexUpdatedEvent.OutputTuple,
      BondYieldShareIndexUpdatedEvent.OutputObject
    >;
    BondYieldShareIndexUpdated: TypedContractEvent<
      BondYieldShareIndexUpdatedEvent.InputTuple,
      BondYieldShareIndexUpdatedEvent.OutputTuple,
      BondYieldShareIndexUpdatedEvent.OutputObject
    >;

    "BondableTokensSet(address,bool)": TypedContractEvent<
      BondableTokensSetEvent.InputTuple,
      BondableTokensSetEvent.OutputTuple,
      BondableTokensSetEvent.OutputObject
    >;
    BondableTokensSet: TypedContractEvent<
      BondableTokensSetEvent.InputTuple,
      BondableTokensSetEvent.OutputTuple,
      BondableTokensSetEvent.OutputObject
    >;

    "BoolSet(bool)": TypedContractEvent<
      BoolSetEvent.InputTuple,
      BoolSetEvent.OutputTuple,
      BoolSetEvent.OutputObject
    >;
    BoolSet: TypedContractEvent<
      BoolSetEvent.InputTuple,
      BoolSetEvent.OutputTuple,
      BoolSetEvent.OutputObject
    >;

    "ClaimRewards(address,uint256,uint256)": TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;
    ClaimRewards: TypedContractEvent<
      ClaimRewardsEvent.InputTuple,
      ClaimRewardsEvent.OutputTuple,
      ClaimRewardsEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "DepositEnableSet(bool)": TypedContractEvent<
      DepositEnableSetEvent.InputTuple,
      DepositEnableSetEvent.OutputTuple,
      DepositEnableSetEvent.OutputObject
    >;
    DepositEnableSet: TypedContractEvent<
      DepositEnableSetEvent.InputTuple,
      DepositEnableSetEvent.OutputTuple,
      DepositEnableSetEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "EndMintReset()": TypedContractEvent<
      EndMintResetEvent.InputTuple,
      EndMintResetEvent.OutputTuple,
      EndMintResetEvent.OutputObject
    >;
    EndMintReset: TypedContractEvent<
      EndMintResetEvent.InputTuple,
      EndMintResetEvent.OutputTuple,
      EndMintResetEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "IntervalSet(uint256)": TypedContractEvent<
      IntervalSetEvent.InputTuple,
      IntervalSetEvent.OutputTuple,
      IntervalSetEvent.OutputObject
    >;
    IntervalSet: TypedContractEvent<
      IntervalSetEvent.InputTuple,
      IntervalSetEvent.OutputTuple,
      IntervalSetEvent.OutputObject
    >;

    "MinDepAmountSet(uint256)": TypedContractEvent<
      MinDepAmountSetEvent.InputTuple,
      MinDepAmountSetEvent.OutputTuple,
      MinDepAmountSetEvent.OutputObject
    >;
    MinDepAmountSet: TypedContractEvent<
      MinDepAmountSetEvent.InputTuple,
      MinDepAmountSetEvent.OutputTuple,
      MinDepAmountSetEvent.OutputObject
    >;

    "NewSigner(address)": TypedContractEvent<
      NewSignerEvent.InputTuple,
      NewSignerEvent.OutputTuple,
      NewSignerEvent.OutputObject
    >;
    NewSigner: TypedContractEvent<
      NewSignerEvent.InputTuple,
      NewSignerEvent.OutputTuple,
      NewSignerEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RefractionRewardsClaimed(address,uint256,uint256)": TypedContractEvent<
      RefractionRewardsClaimedEvent.InputTuple,
      RefractionRewardsClaimedEvent.OutputTuple,
      RefractionRewardsClaimedEvent.OutputObject
    >;
    RefractionRewardsClaimed: TypedContractEvent<
      RefractionRewardsClaimedEvent.InputTuple,
      RefractionRewardsClaimedEvent.OutputTuple,
      RefractionRewardsClaimedEvent.OutputObject
    >;

    "RewardShareIndexUpdated(uint256)": TypedContractEvent<
      RewardShareIndexUpdatedEvent.InputTuple,
      RewardShareIndexUpdatedEvent.OutputTuple,
      RewardShareIndexUpdatedEvent.OutputObject
    >;
    RewardShareIndexUpdated: TypedContractEvent<
      RewardShareIndexUpdatedEvent.InputTuple,
      RewardShareIndexUpdatedEvent.OutputTuple,
      RewardShareIndexUpdatedEvent.OutputObject
    >;

    "RewardSharePerUserIndexSet(uint256,uint256)": TypedContractEvent<
      RewardSharePerUserIndexSetEvent.InputTuple,
      RewardSharePerUserIndexSetEvent.OutputTuple,
      RewardSharePerUserIndexSetEvent.OutputObject
    >;
    RewardSharePerUserIndexSet: TypedContractEvent<
      RewardSharePerUserIndexSetEvent.InputTuple,
      RewardSharePerUserIndexSetEvent.OutputTuple,
      RewardSharePerUserIndexSetEvent.OutputObject
    >;

    "StakingRewardsClaimed(address,uint256,uint256)": TypedContractEvent<
      StakingRewardsClaimedEvent.InputTuple,
      StakingRewardsClaimedEvent.OutputTuple,
      StakingRewardsClaimedEvent.OutputObject
    >;
    StakingRewardsClaimed: TypedContractEvent<
      StakingRewardsClaimedEvent.InputTuple,
      StakingRewardsClaimedEvent.OutputTuple,
      StakingRewardsClaimedEvent.OutputObject
    >;

    "TxFeesSet(uint256)": TypedContractEvent<
      TxFeesSetEvent.InputTuple,
      TxFeesSetEvent.OutputTuple,
      TxFeesSetEvent.OutputObject
    >;
    TxFeesSet: TypedContractEvent<
      TxFeesSetEvent.InputTuple,
      TxFeesSetEvent.OutputTuple,
      TxFeesSetEvent.OutputObject
    >;

    "WhitelistChanged(bool)": TypedContractEvent<
      WhitelistChangedEvent.InputTuple,
      WhitelistChangedEvent.OutputTuple,
      WhitelistChangedEvent.OutputObject
    >;
    WhitelistChanged: TypedContractEvent<
      WhitelistChangedEvent.InputTuple,
      WhitelistChangedEvent.OutputTuple,
      WhitelistChangedEvent.OutputObject
    >;

    "WithdrawPauseSet(bool)": TypedContractEvent<
      WithdrawPauseSetEvent.InputTuple,
      WithdrawPauseSetEvent.OutputTuple,
      WithdrawPauseSetEvent.OutputObject
    >;
    WithdrawPauseSet: TypedContractEvent<
      WithdrawPauseSetEvent.InputTuple,
      WithdrawPauseSetEvent.OutputTuple,
      WithdrawPauseSetEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
