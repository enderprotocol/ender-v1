/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IStrategyManager,
  IStrategyManagerInterface,
} from "../../../../../contracts/strategy/eigenlayer/EnderELStrategy.sol/IStrategyManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IStrategy[]",
            name: "strategies",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "shares",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "depositor",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "withdrawer",
                type: "address",
              },
              {
                internalType: "uint96",
                name: "nonce",
                type: "uint96",
              },
            ],
            internalType: "struct IStrategyManager.WithdrawerAndNonce",
            name: "withdrawerAndNonce",
            type: "tuple",
          },
          {
            internalType: "uint32",
            name: "withdrawalStartBlock",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "delegatedAddress",
            type: "address",
          },
        ],
        internalType: "struct IStrategyManager.QueuedWithdrawal",
        name: "queuedWithdrawal",
        type: "tuple",
      },
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "middlewareTimesIndex",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "receiveAsTokens",
        type: "bool",
      },
    ],
    name: "completeQueuedWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IStrategy",
        name: "strategy",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositIntoStrategy",
    outputs: [
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "strategyIndexes",
        type: "uint256[]",
      },
      {
        internalType: "contract IStrategy[]",
        name: "strategies",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "shares",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "undelegateIfPossible",
        type: "bool",
      },
    ],
    name: "queueWithdrawal",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IStrategyManager__factory {
  static readonly abi = _abi;
  static createInterface(): IStrategyManagerInterface {
    return new Interface(_abi) as IStrategyManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IStrategyManager {
    return new Contract(address, _abi, runner) as unknown as IStrategyManager;
  }
}
