/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AutomationBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationBase__factory>;
    getContractFactory(
      name: "AutomationCompatible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatible__factory>;
    getContractFactory(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutomationCompatibleInterface__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC5267Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267Upgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "EnderBond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnderBond__factory>;
    getContractFactory(
      name: "EnderBondLiquidityDeposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnderBondLiquidityDeposit__factory>;
    getContractFactory(
      name: "EnderStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnderStaking__factory>;
    getContractFactory(
      name: "EnderTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnderTreasury__factory>;
    getContractFactory(
      name: "EndToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EndToken__factory>;
    getContractFactory(
      name: "SEndToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SEndToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MockStEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStEth__factory>;
    getContractFactory(
      name: "MockWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWETH__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IBondNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBondNFT__factory>;
    getContractFactory(
      name: "IEnderBond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEnderBond__factory>;
    getContractFactory(
      name: "IEnderBondLiquidityDeposit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEnderBondLiquidityDeposit__factory>;
    getContractFactory(
      name: "IEnderOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEnderOracle__factory>;
    getContractFactory(
      name: "IPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceFeed__factory>;
    getContractFactory(
      name: "IEnderStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEnderStaking__factory>;
    getContractFactory(
      name: "IEnderStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEnderStrategy__factory>;
    getContractFactory(
      name: "IEnderTreasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEnderTreasury__factory>;
    getContractFactory(
      name: "IEndToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEndToken__factory>;
    getContractFactory(
      name: "IInstadappLite",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInstadappLite__factory>;
    getContractFactory(
      name: "ILido",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILido__factory>;
    getContractFactory(
      name: "ILybraFinance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILybraFinance__factory>;
    getContractFactory(
      name: "ISEndToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISEndToken__factory>;
    getContractFactory(
      name: "IStEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStEth__factory>;
    getContractFactory(
      name: "BondNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BondNFT__factory>;
    getContractFactory(
      name: "EnderOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnderOracle__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "EigenLayerStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EigenLayerStaking__factory>;
    getContractFactory(
      name: "EnderELStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnderELStrategy__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IStrategyManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategyManager__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "StinstaToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StinstaToken__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "LidoStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LidoStaking__factory>;
    getContractFactory(
      name: "Lybra",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lybra__factory>;

    getContractAt(
      name: "AutomationBase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationBase>;
    getContractAt(
      name: "AutomationCompatible",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatible>;
    getContractAt(
      name: "AutomationCompatibleInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AutomationCompatibleInterface>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC5267Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267Upgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721EnumerableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721EnumerableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "EnderBond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnderBond>;
    getContractAt(
      name: "EnderBondLiquidityDeposit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnderBondLiquidityDeposit>;
    getContractAt(
      name: "EnderStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnderStaking>;
    getContractAt(
      name: "EnderTreasury",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnderTreasury>;
    getContractAt(
      name: "EndToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EndToken>;
    getContractAt(
      name: "SEndToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SEndToken>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MockStEth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStEth>;
    getContractAt(
      name: "MockWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWETH>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IBondNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBondNFT>;
    getContractAt(
      name: "IEnderBond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEnderBond>;
    getContractAt(
      name: "IEnderBondLiquidityDeposit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEnderBondLiquidityDeposit>;
    getContractAt(
      name: "IEnderOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEnderOracle>;
    getContractAt(
      name: "IPriceFeed",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceFeed>;
    getContractAt(
      name: "IEnderStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEnderStaking>;
    getContractAt(
      name: "IEnderStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEnderStrategy>;
    getContractAt(
      name: "IEnderTreasury",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEnderTreasury>;
    getContractAt(
      name: "IEndToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IEndToken>;
    getContractAt(
      name: "IInstadappLite",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInstadappLite>;
    getContractAt(
      name: "ILido",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILido>;
    getContractAt(
      name: "ILybraFinance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILybraFinance>;
    getContractAt(
      name: "ISEndToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISEndToken>;
    getContractAt(
      name: "IStEth",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStEth>;
    getContractAt(
      name: "BondNFT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BondNFT>;
    getContractAt(
      name: "EnderOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnderOracle>;
    getContractAt(
      name: "BaseStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "EigenLayerStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EigenLayerStaking>;
    getContractAt(
      name: "EnderELStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnderELStrategy>;
    getContractAt(
      name: "IStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IStrategyManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategyManager>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "StinstaToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.StinstaToken>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "LidoStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LidoStaking>;
    getContractAt(
      name: "Lybra",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Lybra>;

    deployContract(
      name: "AutomationBase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationBase>;
    deployContract(
      name: "AutomationCompatible",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationCompatible>;
    deployContract(
      name: "AutomationCompatibleInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationCompatibleInterface>;
    deployContract(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC5267Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267Upgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Upgradeable>;
    deployContract(
      name: "ERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    deployContract(
      name: "IERC721EnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    deployContract(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    deployContract(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    deployContract(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EnderBond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderBond>;
    deployContract(
      name: "EnderBondLiquidityDeposit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderBondLiquidityDeposit>;
    deployContract(
      name: "EnderStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderStaking>;
    deployContract(
      name: "EnderTreasury",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderTreasury>;
    deployContract(
      name: "EndToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndToken>;
    deployContract(
      name: "SEndToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SEndToken>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockStEth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockStEth>;
    deployContract(
      name: "MockWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockWETH>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IBondNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBondNFT>;
    deployContract(
      name: "IEnderBond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderBond>;
    deployContract(
      name: "IEnderBondLiquidityDeposit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderBondLiquidityDeposit>;
    deployContract(
      name: "IEnderOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderOracle>;
    deployContract(
      name: "IPriceFeed",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeed>;
    deployContract(
      name: "IEnderStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderStaking>;
    deployContract(
      name: "IEnderStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderStrategy>;
    deployContract(
      name: "IEnderTreasury",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderTreasury>;
    deployContract(
      name: "IEndToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEndToken>;
    deployContract(
      name: "IInstadappLite",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInstadappLite>;
    deployContract(
      name: "ILido",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILido>;
    deployContract(
      name: "ILybraFinance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILybraFinance>;
    deployContract(
      name: "ISEndToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISEndToken>;
    deployContract(
      name: "IStEth",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStEth>;
    deployContract(
      name: "BondNFT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BondNFT>;
    deployContract(
      name: "EnderOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderOracle>;
    deployContract(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "EigenLayerStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EigenLayerStaking>;
    deployContract(
      name: "EnderELStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderELStrategy>;
    deployContract(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "IStrategyManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyManager>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "StinstaToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StinstaToken>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "LidoStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LidoStaking>;
    deployContract(
      name: "Lybra",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lybra>;

    deployContract(
      name: "AutomationBase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationBase>;
    deployContract(
      name: "AutomationCompatible",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationCompatible>;
    deployContract(
      name: "AutomationCompatibleInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AutomationCompatibleInterface>;
    deployContract(
      name: "AccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControlUpgradeable>;
    deployContract(
      name: "IAccessControlUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControlUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC5267Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267Upgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "ReentrancyGuardUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    deployContract(
      name: "ERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Upgradeable>;
    deployContract(
      name: "IERC20MetadataUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    deployContract(
      name: "IERC20Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Upgradeable>;
    deployContract(
      name: "ERC721Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Upgradeable>;
    deployContract(
      name: "ERC721EnumerableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721EnumerableUpgradeable>;
    deployContract(
      name: "IERC721EnumerableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721EnumerableUpgradeable>;
    deployContract(
      name: "IERC721MetadataUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    deployContract(
      name: "IERC721ReceiverUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    deployContract(
      name: "IERC721Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Upgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "EIP712Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712Upgradeable>;
    deployContract(
      name: "ERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165Upgradeable>;
    deployContract(
      name: "IERC165Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165Upgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "EnderBond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderBond>;
    deployContract(
      name: "EnderBondLiquidityDeposit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderBondLiquidityDeposit>;
    deployContract(
      name: "EnderStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderStaking>;
    deployContract(
      name: "EnderTreasury",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderTreasury>;
    deployContract(
      name: "EndToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EndToken>;
    deployContract(
      name: "SEndToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SEndToken>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockStEth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockStEth>;
    deployContract(
      name: "MockWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockWETH>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IBondNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBondNFT>;
    deployContract(
      name: "IEnderBond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderBond>;
    deployContract(
      name: "IEnderBondLiquidityDeposit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderBondLiquidityDeposit>;
    deployContract(
      name: "IEnderOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderOracle>;
    deployContract(
      name: "IPriceFeed",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceFeed>;
    deployContract(
      name: "IEnderStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderStaking>;
    deployContract(
      name: "IEnderStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderStrategy>;
    deployContract(
      name: "IEnderTreasury",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEnderTreasury>;
    deployContract(
      name: "IEndToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IEndToken>;
    deployContract(
      name: "IInstadappLite",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInstadappLite>;
    deployContract(
      name: "ILido",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILido>;
    deployContract(
      name: "ILybraFinance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILybraFinance>;
    deployContract(
      name: "ISEndToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISEndToken>;
    deployContract(
      name: "IStEth",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStEth>;
    deployContract(
      name: "BondNFT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BondNFT>;
    deployContract(
      name: "EnderOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderOracle>;
    deployContract(
      name: "BaseStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BaseStrategy>;
    deployContract(
      name: "EigenLayerStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EigenLayerStaking>;
    deployContract(
      name: "EnderELStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnderELStrategy>;
    deployContract(
      name: "IStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "IStrategyManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategyManager>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "StinstaToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.StinstaToken>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "LidoStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LidoStaking>;
    deployContract(
      name: "Lybra",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Lybra>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
